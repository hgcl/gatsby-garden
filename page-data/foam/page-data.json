{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/foam","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"permanent\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"foam\"\n  }, \"Foam\"), mdx(\"p\", null, \"Foam is a VS Code extension that you can use to create a personal knowledge management system. It is heavily inspired by \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://roamresearch.com/\"\n  }, \"Roam Research\"), \", but it is free, open-source and based on Markdown.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Relevant notes: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"foam-in-vs-code\",\n    \"title\": \"Foam in VS Code\"\n  }, \"foam-in-vs-code\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"permanent\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"foam-in-vs-code\"\n  }, \"Foam in VS Code\"), mdx(\"p\", null, \"Here is the official \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://foambubble.github.io/foam/#whats-in-a-foam\"\n  }, \"Foam documentation\"), \".\"), mdx(\"h2\", {\n    \"id\": \"shortcuts\"\n  }, \"Shortcuts\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[x]\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Alt + C\"), \" to mark a checkbox as complete\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Shift + Alt + N\"), \" to create a new markdown file\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"34cc7676-bde5-5cfb-b623-2b7888bf5c5b","fields":{"slug":"/foam-in-vs-code","title":"Foam in VS Code"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"fleeting\", \"permanent\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"file-naming-in-this-pkm\"\n  }, \"File Naming in This PKM\"), mdx(\"h2\", {\n    \"id\": \"filenames\"\n  }, \"Filenames\"), mdx(\"p\", null, \"To support [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"foam\",\n    \"title\": \"Foam\"\n  }, \"foam\"), \"], the Markdown files in this PKM are named in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"kebab-case\"), \". \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"All reference notes begin with a \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\xA7\"), \" symbol.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"tk-notes\",\n    \"title\": \"TK Notes\"\n  }, \"tk-notes\"), \"] titles start with the letters \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"tk\"), \".\")), mdx(\"h2\", {\n    \"id\": \"headlines\"\n  }, \"Headlines\"), mdx(\"p\", null, \"Each note also starts with a headline loosely written in \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Title Case\"), \".\"), mdx(\"hr\", null), mdx(\"p\", null, \"Relevant notes: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"tk-personal-knowledge-management\",\n    \"title\": \"TK Personal Knowledge Management\"\n  }, \"tk-personal-knowledge-management\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"4d9b5629-0cb5-59bf-84f7-a4fe3809e3d1","fields":{"slug":"/file-naming-in-this-pkm","title":"File Naming in This PKM"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"index\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"about-this-digital-garden\"\n  }, \"About This Digital Garden\"), mdx(\"p\", null, \"This is an index of everything meta about this [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"tk-personal-knowledge-management\",\n    \"title\": \"TK Personal Knowledge Management\"\n  }, \"tk-personal-knowledge-management\"), \"] system.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"digital-garden-as-a-playground\",\n    \"title\": \"Digital Garden as a Playground\"\n  }, \"digital-garden-as-a-playground\"), \"]\")), mdx(\"h2\", {\n    \"id\": \"building-blocks\"\n  }, \"Building blocks\"), mdx(\"p\", null, \"This digital garden is built on top of [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"foam\",\n    \"title\": \"Foam\"\n  }, \"foam\"), \"]. To publish it, I use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/mathieudutour/foam-gatsby-template\"\n  }, \"foam-gatsby-template\"), \".\"), mdx(\"h2\", {\n    \"id\": \"system-and-methodologies\"\n  }, \"System and methodologies\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"types-of-notes\",\n    \"title\": \"Types of Notes\"\n  }, \"types-of-notes\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"tags\",\n    \"title\": \"Tags\"\n  }, \"tags\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"file-naming-in-this-pkm\",\n    \"title\": \"File Naming in This PKM\"\n  }, \"file-naming-in-this-pkm\"), \"]\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"becbd00d-99c3-50ce-bcb7-fa32f43c9e47","fields":{"slug":"/about-this-digital-garden","title":"About This Digital Garden"}}}]},"fields":{"slug":"/foam","title":"Foam"}}},"pageContext":{"id":"720e96e4-bfb1-5474-b3f9-3aa5d2565298"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}