{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/types-of-notes","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"permanent\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"types-of-notes\"\n  }, \"Types of Notes\"), mdx(\"p\", null, \"My note-taking system is almost fully based on the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"]. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"fleeting-notes\",\n    \"title\": \"Fleeting Notes\"\n  }, \"fleeting-notes\"), \"] record transient thoughts and reading notes. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"literature-notes\",\n    \"title\": \"Literature Notes\"\n  }, \"literature-notes\"), \"] are atomic concepts or ideas that stem from these first notes\\u2014they are always clearly referencing the original sources. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"permanent-notes\",\n    \"title\": \"Permanent Notes\"\n  }, \"permanent-notes\"), \"] are original ideas that I form from these foundations. They are also atomic concepts.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"index-notes\",\n    \"title\": \"Index Notes\"\n  }, \"index-notes\"), \"] are outlines allowing me to structure notes around an idea.\")), mdx(\"hr\", null), mdx(\"p\", null, \"Relevant notes: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"tk-personal-knowledge-management\",\n    \"title\": \"TK Personal Knowledge Management\"\n  }, \"tk-personal-knowledge-management\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"zettelkasten-method\"\n  }, \"Zettelkasten Method\"), mdx(\"p\", null, \"The Zettelkasten Method was created by [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../6-people/niklas-luhmann\",\n    \"title\": \"Niklas Luhmann\"\n  }, \"niklas-luhmann\"), \"] in the 20th century.\"), mdx(\"p\", null, \"It consisted of a system of paper cards that were linked to one another in a web of ideas. As each card encompasses only one atomic concept, it can easily be connected to cards about completely different topics.\"), mdx(\"p\", null, \"Luhmann organized his cards by separating them between [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"literature-notes\",\n    \"title\": \"Literature Notes\"\n  }, \"literature-notes\"), \"] and [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"permanent-notes\",\n    \"title\": \"Permanent Notes\"\n  }, \"permanent-notes\"), \"]. He also used a consistent referencing method to give a unique ID to each of his notes.\"), mdx(\"p\", null, \"The use of his Zettelkasten over several years allowed Luhmann to develop a [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"second-brain\",\n    \"title\": \"Second Brain\"\n  }, \"second-brain\"), \"]\\u2014or thinking companion.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../1-reference/%C2%A7communicating-with-slip-boxes-1992\",\n    \"title\": \"Communicating With Slip Boxes (1992)\"\n  }, \"\\xA7communicating-with-slip-boxes-1992\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"1db29981-93e7-5e64-8ea0-030369496b7d","fields":{"slug":"/zettelkasten-method","title":"Zettelkasten Method"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"fleeting-notes\"\n  }, \"Fleeting Notes\"), mdx(\"p\", null, \"A fleeting note is a type of note that is part of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"].\"), mdx(\"p\", null, \"When reading, watching a documentary, listening to a podcast, you might discover a piece of information you want to remember. It might also be a simple thought unrelated to any source.\"), mdx(\"p\", null, \"When it happens, always make sure to have a space\\u2014a fleeting note\\u2014to record that idea. It can be on paper or digital.\"), mdx(\"p\", null, \"To determine if the idea is \\u201Cfleeting note material\\u201D, it should follow at least one of two criteria:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"You wish to remember that idea permanently\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"You want to use that idea in your work (what you create)\")), mdx(\"p\", null, \"Also don\\u2019t forget to consistently reference your source.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/zettelkasten-method-2020\",\n    \"title\": \"Â§zettelkasten-method-2020\"\n  }, \"[[\\xA7zettelkasten-method-2020]]\"), \"\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"567ba937-e919-5d59-8925-f6ab5452614f","fields":{"slug":"/fleeting-notes","title":"Fleeting Notes"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"literature-notes\"\n  }, \"Literature Notes\"), mdx(\"p\", null, \"A literature note is a type of note that is part of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"].\"), mdx(\"p\", null, \"Literature notes stem from [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"fleeting-notes\",\n    \"title\": \"Fleeting Notes\"\n  }, \"fleeting-notes\"), \"] that have passed the curation filter. A literature note encompasses only one atomic idea or concept. Therefore, one fleeting note might lead to multiple literature notes.\"), mdx(\"p\", null, \"A literature note follows the following four criteria:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"One literature note represents one atomic idea.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It should be written in your own words.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Write it in a way that you would understand it in 10 years.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Always include references inline (Ahrens, 2017, pp.110) and at the end of your note (eg. \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Ahrens, S. (2017). How to take smart notes: One simple technique.\"), \")\")), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7zettelkasten-method-2020\",\n    \"title\": \"Zettelkasten Method (2020)\"\n  }, \"\\xA7zettelkasten-method-2020\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"67ca40e7-391c-50da-be02-e83018ff5e6a","fields":{"slug":"/literature-notes","title":"Literature Notes"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"permanent-notes\"\n  }, \"Permanent Notes\"), mdx(\"p\", null, \"A permanent note is a type of note that is part of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"].\"), mdx(\"p\", null, \"It is easiest to explain permanent notes in contrast to [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"literature-notes\",\n    \"title\": \"Literature Notes\"\n  }, \"literature-notes\"), \"]. \"), mdx(\"p\", null, \"A literature note is exclusively based on one external source. It can therefore only have one backlink. On contrary, permanent notes are created in the context of your life experiences, interests and personal thoughts. In other words, a permanent note is an \\u201Coriginal creation\\u201D with possibly multiple links.\"), mdx(\"p\", null, \"As with literature notes, a permanent note should only contain one idea or concept.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7zettelkasten-method-2020\",\n    \"title\": \"Zettelkasten Method (2020)\"\n  }, \"\\xA7zettelkasten-method-2020\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"d15f917a-bab2-59de-9dd2-cd22ccab991e","fields":{"slug":"/permanent-notes","title":"Permanent Notes"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"index-notes\"\n  }, \"Index Notes\"), mdx(\"p\", null, \"An index note is a type of note that is part of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"].\"), mdx(\"p\", null, \"After a while, a Zettelkasten can feel chaotic as it might mix notes about completely different topics. An index note comes into play to organize these notes by clusters.\"), mdx(\"p\", null, \"There can be two levels of index notes:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The outline of an article or chapter\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The outline of a book\")), mdx(\"h2\", {\n    \"id\": \"index-notes-as-outlines-of-chapters\"\n  }, \"Index Notes as Outlines of Chapters\"), mdx(\"p\", null, \"This is the most straightforward type of index notes. After nurturing your Zettelkasten for a while, you might detect clusters of notes.\"), mdx(\"p\", null, \"Structure these notes into a table of content that could be the outline to a book chapter or an article.\"), mdx(\"p\", null, \"There you go, you have your first index note.\"), mdx(\"h2\", {\n    \"id\": \"index-notes-as-outlines-of-books\"\n  }, \"Index Notes as Outlines of Books\"), mdx(\"p\", null, \"This level of index notes is at a higher level. Rebecca Williams calls them keyword notes.\"), mdx(\"p\", null, \"In this higher level, the index note outlines an entire book with its chapters. In other words, this type of index note is made of other index notes.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7zettelkasten-method-2020\",\n    \"title\": \"Zettelkasten Method (2020)\"\n  }, \"\\xA7zettelkasten-method-2020\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"3aaba632-6088-5dc4-a49c-2b33deab1cba","fields":{"slug":"/index-notes","title":"Index Notes"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"tk\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"tk-personal-knowledge-management\"\n  }, \"TK Personal Knowledge Management\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"7f1f1aa1-be88-5379-ba77-c9d4ffc37a10","fields":{"slug":"/tk-personal-knowledge-management","title":"TK Personal Knowledge Management"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"permanent\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"tk-notes\"\n  }, \"TK Notes\"), mdx(\"p\", null, \"I first heard of TK\\u2014a.k.a. to come\\u2014from [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7make-your-notes-work-for-you-2020\",\n    \"title\": \"Make Your Notes Work for You (2020)\"\n  }, \"\\xA7make-your-notes-work-for-you-2020\"), \"]. The article itself refers to the journalistic use of TK to signify that more material will come later\", \"\\xA0\", mdx(\"sup\", null, \"1\"), \".\"), mdx(\"p\", null, \"In [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"types-of-notes\",\n    \"title\": \"Types of Notes\"\n  }, \"types-of-notes\"), \"], I add the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"#tk\"), \" tag to notes I create on the fly and don't intend to deepen soon.\"), mdx(\"p\", null, \"What is the difference between [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"fleeting-notes\",\n    \"title\": \"Fleeting Notes\"\n  }, \"fleeting-notes\"), \"] and TK notes? Fleeting notes are in my inbox and are active work-in-progress. TK notes are not active notes. They are just ideas that might never come to life, as they might never get written at all.\"), mdx(\"hr\", null), mdx(\"sup\", null, \"1\"), \"\\xA0Wikipedia [To come (publishing)](https://en.wikipedia.org/wiki/To_come_(publishing)) article\");\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"f144bbfc-826f-5dbd-9b00-fbee287ec624","fields":{"slug":"/tk-notes","title":"TK Notes"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"index\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"about-this-digital-garden\"\n  }, \"About This Digital Garden\"), mdx(\"p\", null, \"This is an index of everything meta about this [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"tk-personal-knowledge-management\",\n    \"title\": \"TK Personal Knowledge Management\"\n  }, \"tk-personal-knowledge-management\"), \"] system.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"digital-garden-as-a-playground\",\n    \"title\": \"Digital Garden as a Playground\"\n  }, \"digital-garden-as-a-playground\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"types-of-notes\",\n    \"title\": \"Types of Notes\"\n  }, \"types-of-notes\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"tags\",\n    \"title\": \"Tags\"\n  }, \"tags\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"file-naming-in-this-pkm\",\n    \"title\": \"File Naming in This PKM\"\n  }, \"file-naming-in-this-pkm\"), \"]\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"becbd00d-99c3-50ce-bcb7-fa32f43c9e47","fields":{"slug":"/about-this-digital-garden","title":"About This Digital Garden"}}}]},"fields":{"slug":"/types-of-notes","title":"Types of Notes"}}},"pageContext":{"id":"f0ca147b-2f7b-5f0e-a4f8-2a7b0fe2e1a0"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}