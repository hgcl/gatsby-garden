{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/zettelkasten-method","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"zettelkasten-method\"\n  }, \"Zettelkasten Method\"), mdx(\"p\", null, \"The Zettelkasten Method was created by [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"niklas-luhmann\",\n    \"title\": \"Niklas Luhmann\"\n  }, \"niklas-luhmann\"), \"] in the 20th century.\"), mdx(\"p\", null, \"It consisted of a system of paper cards that were linked to one another in a web of ideas. As each card encompasses only one atomic concept, it can easily be connected to cards about completely different topics.\"), mdx(\"p\", null, \"Luhmann organized his cards by separating them between [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"literature-notes\",\n    \"title\": \"Literature Notes\"\n  }, \"literature-notes\"), \"] and [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"permanent-notes\",\n    \"title\": \"Permanent Notes\"\n  }, \"permanent-notes\"), \"]. He also used a consistent referencing method to give a unique ID to each of his notes.\"), mdx(\"p\", null, \"The use of his Zettelkasten over several years allowed Luhmann to develop a [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"second-brain\",\n    \"title\": \"Second Brain\"\n  }, \"second-brain\"), \"]\\u2014that he called his thinking companion.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7communicating-with-slip-boxes-1992\",\n    \"title\": \"Communicating With Slip Boxes (1992)\"\n  }, \"\\xA7communicating-with-slip-boxes-1992\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"people\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"niklas-luhmann\"\n  }, \"Niklas Luhmann\"), mdx(\"p\", null, \"Inventor of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"3f9c84e8-f2a8-5302-9191-76ad603afe3d","fields":{"slug":"/niklas-luhmann","title":"Niklas Luhmann"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"literature-notes\"\n  }, \"Literature Notes\"), mdx(\"p\", null, \"A literature note is a type of note that is part of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"].\"), mdx(\"p\", null, \"Literature notes stem from [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"fleeting-notes\",\n    \"title\": \"Fleeting Notes\"\n  }, \"fleeting-notes\"), \"] that have passed the curation filter. A literature note encompasses only one atomic idea or concept. Therefore, one fleeting note might lead to multiple literature notes.\"), mdx(\"p\", null, \"A literature note follows the following four criteria:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"One literature note represents one atomic idea.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It should be written in your own words.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Write it in a way that you would understand it in 10 years.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Always include references inline (Ahrens, 2017, pp.110) and at the end of your note (e.g. \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Ahrens, S. (2017). How to take smart notes: One simple technique.\"), \")\")), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7zettelkasten-method-2020\",\n    \"title\": \"Zettelkasten Method (2020)\"\n  }, \"\\xA7zettelkasten-method-2020\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"67ca40e7-391c-50da-be02-e83018ff5e6a","fields":{"slug":"/literature-notes","title":"Literature Notes"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"permanent-notes\"\n  }, \"Permanent Notes\"), mdx(\"p\", null, \"A permanent note is a type of note that is part of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"].\"), mdx(\"p\", null, \"It is easiest to explain permanent notes in contrast to [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"literature-notes\",\n    \"title\": \"Literature Notes\"\n  }, \"literature-notes\"), \"]. \"), mdx(\"p\", null, \"A literature note is exclusively based on one external source. It can therefore only have one backlink. On contrary, permanent notes are created in the context of your life experiences, interests and personal thoughts. In other words, a permanent note is an \\u201Coriginal creation\\u201D with possibly multiple links.\"), mdx(\"p\", null, \"As with literature notes, a permanent note should only contain one idea or concept.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7zettelkasten-method-2020\",\n    \"title\": \"Zettelkasten Method (2020)\"\n  }, \"\\xA7zettelkasten-method-2020\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"d15f917a-bab2-59de-9dd2-cd22ccab991e","fields":{"slug":"/permanent-notes","title":"Permanent Notes"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"second-brain\"\n  }, \"Second Brain\"), mdx(\"p\", null, \"When creating the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"], [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"niklas-luhmann\",\n    \"title\": \"Niklas Luhmann\"\n  }, \"niklas-luhmann\"), \"] realized that a \\u201Csecondary memory\\u201D was born out of his network of cards and ideas.\"), mdx(\"p\", null, \"In some ways, the web of notes takes a life of its own, making connections where your conscious mind wouldn\\u2019t have done so, resulting in a separate entity\\u2014a thinking companion.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7communicating-with-slip-boxes-1992\",\n    \"title\": \"Communicating With Slip Boxes (1992)\"\n  }, \"\\xA7communicating-with-slip-boxes-1992\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"b6eb91a0-8930-5b16-836e-46fac99dcda9","fields":{"slug":"/second-brain","title":"Second Brain"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"reference\", \"article\"],\n  \"source\": \"https://luhmann.surge.sh/communicating-with-slip-boxes\",\n  \"author\": \"Niklas Luhmann\",\n  \"publishingdate\": \"1992\",\n  \"dateretrieved\": \"2020-11-26\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"communicating-with-slip-boxes-1992\"\n  }, \"Communicating With Slip Boxes (1992)\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Method created by [\", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"niklas-luhmann\",\n    \"title\": \"Niklas Luhmann\"\n  }, \"niklas-luhmann\"), \"]\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Birth of a [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"second-brain\",\n    \"title\": \"Second Brain\"\n  }, \"second-brain\"), \"]\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"As a result of extensive work with this technique a kind of secondary memory will arise, an alter ego with who we can constantly communicate. It proves to be similar to our own memory in that it does not have a thoroughly constructed order of its entirety, not hierarchy, and most certainly no linear structure like a book. Just because of this, it gets its own life, independent of its author.\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linking notes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Better to formulate problems so that heterogenous notes are linked together\")))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"f9ef686d-5e7c-5120-ab40-8d2e9c13056f","fields":{"slug":"/§communicating-with-slip-boxes-1992","title":"Communicating With Slip Boxes (1992)"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"reference\", \"book\"],\n  \"author\": \"Sönke Ahrens\",\n  \"publishingdate\": \"2017\",\n  \"pagenumber\": 178\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"how-to-take-smart-notes-2017\"\n  }, \"How to Take Smart Notes (2017)\"), mdx(\"h2\", {\n    \"id\": \"info\"\n  }, \"Info\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Topics: [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"]\")), mdx(\"p\", null, \"NOT READ, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://durmonski.com/book-summaries/how-to-take-smart-notes/\"\n  }, \"here is a good summary\"), \".\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"0ccc232b-bb76-56c1-8ced-6fe1d5c89122","fields":{"slug":"/§how-to-take-smart-notes-2017","title":"How to Take Smart Notes (2017)"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"second-brain\"\n  }, \"Second Brain\"), mdx(\"p\", null, \"When creating the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"], [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"niklas-luhmann\",\n    \"title\": \"Niklas Luhmann\"\n  }, \"niklas-luhmann\"), \"] realized that a \\u201Csecondary memory\\u201D was born out of his network of cards and ideas.\"), mdx(\"p\", null, \"In some ways, the web of notes takes a life of its own, making connections where your conscious mind wouldn\\u2019t have done so, resulting in a separate entity\\u2014a thinking companion.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7communicating-with-slip-boxes-1992\",\n    \"title\": \"Communicating With Slip Boxes (1992)\"\n  }, \"\\xA7communicating-with-slip-boxes-1992\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"b6eb91a0-8930-5b16-836e-46fac99dcda9","fields":{"slug":"/second-brain","title":"Second Brain"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"literature-notes\"\n  }, \"Literature Notes\"), mdx(\"p\", null, \"A literature note is a type of note that is part of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"].\"), mdx(\"p\", null, \"Literature notes stem from [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"fleeting-notes\",\n    \"title\": \"Fleeting Notes\"\n  }, \"fleeting-notes\"), \"] that have passed the curation filter. A literature note encompasses only one atomic idea or concept. Therefore, one fleeting note might lead to multiple literature notes.\"), mdx(\"p\", null, \"A literature note follows the following four criteria:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"One literature note represents one atomic idea.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"It should be written in your own words.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Write it in a way that you would understand it in 10 years.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Always include references inline (Ahrens, 2017, pp.110) and at the end of your note (e.g. \", mdx(\"em\", {\n    parentName: \"li\"\n  }, \"Ahrens, S. (2017). How to take smart notes: One simple technique.\"), \")\")), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7zettelkasten-method-2020\",\n    \"title\": \"Zettelkasten Method (2020)\"\n  }, \"\\xA7zettelkasten-method-2020\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"67ca40e7-391c-50da-be02-e83018ff5e6a","fields":{"slug":"/literature-notes","title":"Literature Notes"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"fleeting-notes\"\n  }, \"Fleeting Notes\"), mdx(\"p\", null, \"A fleeting note is a type of note that is part of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"].\"), mdx(\"p\", null, \"When reading, watching a documentary, listening to a podcast, you might discover a piece of information you want to remember. It might also be a simple thought unrelated to any source.\"), mdx(\"p\", null, \"When it happens, always make sure to have a space\\u2014a fleeting note\\u2014to record that idea. It can be on paper or digital.\"), mdx(\"p\", null, \"To determine if the idea is \\u201Cfleeting note material\\u201D, it should follow at least one of two criteria:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"You wish to remember that idea permanently\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"You want to use that idea in your work (what you create)\")), mdx(\"p\", null, \"Also don\\u2019t forget to consistently reference your source.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7zettelkasten-method-2020\",\n    \"title\": \"Zettelkasten Method (2020)\"\n  }, \"\\xA7zettelkasten-method-2020\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"567ba937-e919-5d59-8925-f6ab5452614f","fields":{"slug":"/fleeting-notes","title":"Fleeting Notes"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"people\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"niklas-luhmann\"\n  }, \"Niklas Luhmann\"), mdx(\"p\", null, \"Inventor of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"3f9c84e8-f2a8-5302-9191-76ad603afe3d","fields":{"slug":"/niklas-luhmann","title":"Niklas Luhmann"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"permanent-notes\"\n  }, \"Permanent Notes\"), mdx(\"p\", null, \"A permanent note is a type of note that is part of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"].\"), mdx(\"p\", null, \"It is easiest to explain permanent notes in contrast to [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"literature-notes\",\n    \"title\": \"Literature Notes\"\n  }, \"literature-notes\"), \"]. \"), mdx(\"p\", null, \"A literature note is exclusively based on one external source. It can therefore only have one backlink. On contrary, permanent notes are created in the context of your life experiences, interests and personal thoughts. In other words, a permanent note is an \\u201Coriginal creation\\u201D with possibly multiple links.\"), mdx(\"p\", null, \"As with literature notes, a permanent note should only contain one idea or concept.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7zettelkasten-method-2020\",\n    \"title\": \"Zettelkasten Method (2020)\"\n  }, \"\\xA7zettelkasten-method-2020\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"d15f917a-bab2-59de-9dd2-cd22ccab991e","fields":{"slug":"/permanent-notes","title":"Permanent Notes"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"reference\", \"article\"],\n  \"source\": \"https://medium.com/@rebeccawilliams9941/the-zettelkasten-method-examples-to-help-you-get-started-8f8a44fa9ae6\",\n  \"author\": \"Rebecca Williams\",\n  \"publishingdate\": \"2020\",\n  \"dateretrieved\": \"2020-11-22\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"zettelkasten-method-2020\"\n  }, \"Zettelkasten Method (2020)\"), mdx(\"h2\", {\n    \"id\": \"info\"\n  }, \"Info\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Topics: [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"References: [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"%C2%A7how-to-take-smart-notes-2017\",\n    \"title\": \"How to Take Smart Notes (2017)\"\n  }, \"\\xA7how-to-take-smart-notes-2017\"), \"]\")), mdx(\"h2\", {\n    \"id\": \"questions\"\n  }, \"Questions\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"What was the first source for this article?\")), mdx(\"h2\", {\n    \"id\": \"notes\"\n  }, \"Notes\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"fleeting-notes\",\n    \"title\": \"Fleeting Notes\"\n  }, \"fleeting-notes\"), \"]\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"FN are reminders of ideas and concepts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"FN must follow at least one of 2 criteria:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You want to remember this idea permanently\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"You want to use the idea in your work\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Always reference the source and author\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"literature-notes\",\n    \"title\": \"Literature Notes\"\n  }, \"literature-notes\"), \"]\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"After filtering out the fleeting notes that speak to me, I get my LN\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Elaborate those FN\\u2014those reminders\\u2014into a paragraph that fully describes the idea\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Write it as if writing to someone else\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"LN follow 4 criteria:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"LN should be written in your own words\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Written in a way that you understand it in 10 years\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1 note = 1 idea\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Include reference (Last Name, year, pp.22) inline and complete source at the bottom\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"eg. Ahrens, S. (2017). How to take smart notes: One simple technique.\"))))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"permanent-notes\",\n    \"title\": \"Permanent Notes\"\n  }, \"permanent-notes\"), \"] \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"PN vs. LN\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"LN written in the context of the \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"source\"), \". PN written in context of \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"your own ideas and interests\"), \".\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"LN have one connection (= source). PN can have many.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"1 note = 1 idea, as it is easier to connect with other ideas\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"how to connect permanent notes, examples: \"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A term mentioned in a note which links to a term definition note.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An author mentioned in a note which links to an author biography note.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A note which directly contradicts findings in a note that contains a fact, study, opinion.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A note which adds something to the existing note.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A personal comment on the idea contained in another note.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Use a bridge note\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Connect with a topic index note\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"index-notes\",\n    \"title\": \"Index Notes\"\n  }, \"index-notes\"), \"]\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Represents a cluster of PN (that you detect after a while)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"They are similar to an individual article outline, table of content of an article\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Created from content that already exists\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Keyword notes\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"An index note = table of content of an article\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"A KN = table of content of a book (= broader topic), eg. art\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Index notes are often linked inside of KN. Eg. Art (KN) > Art goals (IN)\")))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"63d01327-d7ef-514b-b57b-94fed9244006","fields":{"slug":"/§zettelkasten-method-2020","title":"Zettelkasten Method (2020)"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"permanent\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"types-of-notes\"\n  }, \"Types of Notes\"), mdx(\"p\", null, \"My note-taking system is almost fully based on the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"]. \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"fleeting-notes\",\n    \"title\": \"Fleeting Notes\"\n  }, \"fleeting-notes\"), \"] record transient thoughts and reading notes. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"literature-notes\",\n    \"title\": \"Literature Notes\"\n  }, \"literature-notes\"), \"] are atomic concepts or ideas that stem from these first notes\\u2014they are always clearly referencing the original sources. \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"permanent-notes\",\n    \"title\": \"Permanent Notes\"\n  }, \"permanent-notes\"), \"] are original ideas that I form from these foundations. They are also atomic concepts.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"index-notes\",\n    \"title\": \"Index Notes\"\n  }, \"index-notes\"), \"] are outlines allowing me to structure notes around an idea.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"tk-notes\",\n    \"title\": \"TK Notes\"\n  }, \"tk-notes\"), \"] are idea notes that are not active yet\\u2014and might never be.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Reference notes are my notes based on original sources. They can be blog posts, articles, podcasts, etc.\")), mdx(\"hr\", null), mdx(\"p\", null, \"Relevant notes: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"tk-personal-knowledge-management\",\n    \"title\": \"TK Personal Knowledge Management\"\n  }, \"tk-personal-knowledge-management\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"f0ca147b-2f7b-5f0e-a4f8-2a7b0fe2e1a0","fields":{"slug":"/types-of-notes","title":"Types of Notes"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"index-notes\"\n  }, \"Index Notes\"), mdx(\"p\", null, \"An index note is a type of note that is part of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"].\"), mdx(\"p\", null, \"After a while, a Zettelkasten can feel chaotic as it might mix notes about completely different topics. An index note comes into play to organize these notes by clusters.\"), mdx(\"p\", null, \"There can be two levels of index notes:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The outline of an article or chapter\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"The outline of a book\")), mdx(\"h2\", {\n    \"id\": \"index-notes-as-outlines-of-chapters\"\n  }, \"Index Notes as Outlines of Chapters\"), mdx(\"p\", null, \"This is the most straightforward type of index notes. After nurturing your Zettelkasten for a while, you might detect clusters of notes.\"), mdx(\"p\", null, \"Structure these notes into a table of content that could be the outline to a book chapter or an article.\"), mdx(\"p\", null, \"There you go, you have your first index note.\"), mdx(\"h2\", {\n    \"id\": \"index-notes-as-outlines-of-books\"\n  }, \"Index Notes as Outlines of Books\"), mdx(\"p\", null, \"This level of index notes is at a higher level. Rebecca Williams calls them keyword notes.\"), mdx(\"p\", null, \"In this higher level, the index note outlines an entire book with its chapters. In other words, this type of index note is made of other index notes.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7zettelkasten-method-2020\",\n    \"title\": \"Zettelkasten Method (2020)\"\n  }, \"\\xA7zettelkasten-method-2020\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"3aaba632-6088-5dc4-a49c-2b33deab1cba","fields":{"slug":"/index-notes","title":"Index Notes"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"every-note-should-have-three-types-of-links\"\n  }, \"Every Note Should Have Three Types of Links\"), mdx(\"p\", null, \"Houtz argues that every note of a [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"] should link to at least three types of notes:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Upwards \\u2014 link to a more general idea. For example, this current note can link to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/tk-how-to-connect-notes\",\n    \"title\": \"tk-how-to-connect-notes\"\n  }, \"[[tk-how-to-connect-notes]]\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Downwards \\u2014 link to a more specific idea. For example, the \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[zettelkasten-method]]\"), \" note can point to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"[[literature-notes]]\"), \".\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Laterally \\u2014 link to a related topic. These related topics are the ones that would typically crop up in the \\\"Relevant notes\\\" section of a note.\")), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"%C2%A7make-your-notes-work-for-you-2020\",\n    \"title\": \"Make Your Notes Work for You (2020)\"\n  }, \"\\xA7make-your-notes-work-for-you-2020\"), \"]\"), mdx(\"p\", null, \"Relevant notes: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"tk-notes\",\n    \"title\": \"TK Notes\"\n  }, \"tk-notes\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"36e2f042-2622-5ebd-a4e9-b1c5b231fe72","fields":{"slug":"/every-note-should-have-three-types-of-links","title":"Every Note Should Have Three Types of Links"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"index\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"about-this-digital-garden\"\n  }, \"About This Digital Garden\"), mdx(\"p\", null, \"This is an index of everything meta about this [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"tk-personal-knowledge-management\",\n    \"title\": \"TK Personal Knowledge Management\"\n  }, \"tk-personal-knowledge-management\"), \"] system.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"digital-garden-as-a-playground\",\n    \"title\": \"Digital Garden as a Playground\"\n  }, \"digital-garden-as-a-playground\"), \"]\")), mdx(\"h2\", {\n    \"id\": \"building-blocks\"\n  }, \"Building blocks\"), mdx(\"p\", null, \"This digital garden is built on top of [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"foam\",\n    \"title\": \"Foam\"\n  }, \"foam\"), \"]. To publish it, I use the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/mathieudutour/foam-gatsby-template\"\n  }, \"foam-gatsby-template\"), \".\"), mdx(\"h2\", {\n    \"id\": \"system-and-methodologies\"\n  }, \"System and methodologies\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"types-of-notes\",\n    \"title\": \"Types of Notes\"\n  }, \"types-of-notes\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"tags\",\n    \"title\": \"Tags\"\n  }, \"tags\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"file-naming-in-this-pkm\",\n    \"title\": \"File Naming in This PKM\"\n  }, \"file-naming-in-this-pkm\"), \"]\")));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"becbd00d-99c3-50ce-bcb7-fa32f43c9e47","fields":{"slug":"/about-this-digital-garden","title":"About This Digital Garden"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"reference\", \"article\"],\n  \"source\": \"https://luhmann.surge.sh/communicating-with-slip-boxes\",\n  \"author\": \"Niklas Luhmann\",\n  \"publishingdate\": \"1992\",\n  \"dateretrieved\": \"2020-11-26\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"communicating-with-slip-boxes-1992\"\n  }, \"Communicating With Slip Boxes (1992)\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Method created by [\", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"niklas-luhmann\",\n    \"title\": \"Niklas Luhmann\"\n  }, \"niklas-luhmann\"), \"]\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"zettelkasten-method\",\n    \"title\": \"Zettelkasten Method\"\n  }, \"zettelkasten-method\"), \"]\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Birth of a [\", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"second-brain\",\n    \"title\": \"Second Brain\"\n  }, \"second-brain\"), \"]\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"As a result of extensive work with this technique a kind of secondary memory will arise, an alter ego with who we can constantly communicate. It proves to be similar to our own memory in that it does not have a thoroughly constructed order of its entirety, not hierarchy, and most certainly no linear structure like a book. Just because of this, it gets its own life, independent of its author.\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Linking notes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Better to formulate problems so that heterogenous notes are linked together\")))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"f9ef686d-5e7c-5120-ab40-8d2e9c13056f","fields":{"slug":"/§communicating-with-slip-boxes-1992","title":"Communicating With Slip Boxes (1992)"}}}]},"fields":{"slug":"/zettelkasten-method","title":"Zettelkasten Method"}}},"pageContext":{"id":"1db29981-93e7-5e64-8ea0-030369496b7d"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}