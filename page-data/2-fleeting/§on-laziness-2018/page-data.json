{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/2-fleeting/§on-laziness-2018","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"reference\", \"article\"],\n  \"source\": \"https://thingofthings.wordpress.com/2018/07/19/on-laziness\",\n  \"author\": \"Ozy Frantz\",\n  \"publishingdate\": \"2018-07-19T00:00:00.000Z\",\n  \"dateretrieved\": \"2021-01-08T08:05:12.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"on-laziness-2018\"\n  }, \"On Laziness (2018)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Using generalizing words\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We use generalizing words to describe things. This simplifies things and can change the perception and understanding we have of that thing.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"eg. lazy: Do we actually use it to describe someone who is really trying to avoid responsibility? Or is it a shorthand to say that X doesn't have the same cleanliness standards as ourselves / is burnout or sleep-deprived / etc.?\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Underlying meaning\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"We have to be careful with our use of generalizing words as they often have underlying meanings.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Eg. lazy = doesn't do the thing I want that person to do // but it also implies = this person is bad, worth of resent\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"My one caution is that you should take care about calling other people \\u201Clazy\\u201D unless you\\u2019re really certain that they won\\u2019t interpret you as meaning the \\u201Cbad and horrible\\u201D meaning, because it is good to make sure that when you insult people it is deliberate.\")))))));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[],"inboundReferences":[]},"fields":{"slug":"/2-fleeting/§on-laziness-2018","title":"On Laziness (2018)"}}},"pageContext":{"id":"933a7aa5-7b3b-595e-9304-1bf2bafc75de"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}