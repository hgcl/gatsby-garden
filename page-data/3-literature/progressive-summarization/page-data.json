{"componentChunkName":"component---node-modules-gatsby-theme-garden-src-templates-local-file-js","path":"/3-literature/progressive-summarization","result":{"data":{"file":{"childMdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"literature\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"progressive-summarization\"\n  }, \"Progressive Summarization\"), mdx(\"p\", null, \"Progressive summarization is a note-taking technique created by [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../6-people/tiago-forte\",\n    \"title\": \"Tiago Forte\"\n  }, \"tiago-forte\"), \"]. When creating notes from a source, its objective is to find the right balance between discoverability and understanding.\"), mdx(\"h2\", {\n    \"id\": \"discoverability-vs-understanding\"\n  }, \"Discoverability vs Understanding\"), mdx(\"p\", null, \"If a note is easier to digest and compressed to its essential ideas, it will be more \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"discoverable\"), \".\"), mdx(\"p\", null, \"If a note has more complexity, context, examples and details, it will be more \", mdx(\"em\", {\n    parentName: \"p\"\n  }, \"understandable\"), \".\"), mdx(\"h2\", {\n    \"id\": \"note-taking-in-5-layers\"\n  }, \"Note-Taking in 5 Layers\"), mdx(\"p\", null, \"Progressive summarization can be done in 5 layers, each extracting the key ideas of a source a little more.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 1: full notes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 2: bold passages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 3: highlighted passages\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 4: mini-summary\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 5: remixing the content\")), mdx(\"p\", null, \"The first layer is encompasses your full raw notes. They can be very detailed and understandable.\"), mdx(\"p\", null, \"In the second layer, mark in bold key phrases or keywords that represent the core of the idea. No need to be too picky yet and go with your gut feelings.\"), mdx(\"p\", null, \"In the third layer, highlight the \\u201Cbest of the best\\u201D from the previous bold passages. These are ideas that are unique and really speak to you.\"), mdx(\"p\", null, \"The fourth layer consists of summarizing the key points of layers 2 and 3. This short summary should be in your own words.\"), mdx(\"p\", null, \"The fifth and last layer only applies to the notes and ideas that you are the most excited about. You take them apart and remix them with your own experience and ideas to create something new and original.\"), mdx(\"hr\", null), mdx(\"p\", null, \"Reference: [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../1-reference/%C2%A7progressive-summarization-2017\",\n    \"title\": \"Progressive Summarization (2017)\"\n  }, \"\\xA7progressive-summarization-2017\"), \"]\"));\n}\n;\nMDXContent.isMDXComponent = true;","outboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"people\"],\n  \"website\": \"https://fortelabs.co/\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"tiago-forte\"\n  }, \"Tiago Forte\"), mdx(\"p\", null, \"Tiago Forte is a productivity guru. He is the creator of the [\", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"../3-literature/p-a-r-a-method\",\n    \"title\": \"P.A.R.A. Method\"\n  }, \"p-a-r-a-method\"), \"] as well as the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.buildingasecondbrain.com/\"\n  }, \"Build a Second Brain\"), \" online course.\"));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"b1fbf7c7-be51-550f-a576-7e983c5ab93e","fields":{"slug":"/6-people/tiago-forte","title":"Tiago Forte"}}},{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"reference\", \"article\"],\n  \"source\": \"https://fortelabs.co/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/\",\n  \"author\": \"Tiago Forte\",\n  \"publishingdate\": 2017,\n  \"dateretrieved\": \"2020-11-30T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"progressive-summarization-2017\"\n  }, \"Progressive Summarization (2017)\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Method coined by [\", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"../6-people/tiago-forte\",\n    \"title\": \"Tiago Forte\"\n  }, \"tiago-forte\"), \"]\")), mdx(\"h2\", {\n    \"id\": \"knowledge-management-systems\"\n  }, \"Knowledge Management Systems\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tagging-first system\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Tagging-first approaches argue that there should be no explicit hierarchy of notes, notebooks, and stacks. Notes are envisioned as an ever-changing, virtual matrix of interconnected, free-floating ideas. Because many tags can be applied to one note, there are multiple pathways to discover any given note. Locating notes in specific notebooks and folders is seen as limiting and static. \"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Notebook-first system\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This basically translates how we organize things in the physical world\\u200A\\u2014\\u200Ain a series of discrete containers\\u200A\\u2014\\u200Ainto the digital world. \"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discoverability vs. Understanding\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discoverable = making a note digest by compressing it down to its essential\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Understandable = making a note complete, add context, examples and details\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If a note is too complex: \\u201CThe main points and key insights are hidden somewhere in the noise.\\u201D\")))))), mdx(\"h2\", {\n    \"id\": \"progressive-summarization-5-layers\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"../3-literature/progressive-summarization\",\n    \"title\": \"Progressive Summarization\"\n  }, \"progressive-summarization\"), \"]: 5 Layers\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 1 \\u2014 Notes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Full notes and context, very understandable\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 2 \\u2014 Bold Passages\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When going back to a note, making bold key sentences, keywords representing the core of the idea\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 3 \\u2014 Highlighted Passages\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Highlighting only the \\u201Cbest of the best\\u201D, unique\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 4 \\u2014 Mini-summary\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Summarizing the key points of the note in your own words\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 5 \\u2014 Remix\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"And finally, for a tiny minority of sources, the ones that are so powerful and exciting I want them to become part of how I think and work immediately, I remix them. After pulling them apart and dissecting them from every angle in layers 1\\u20134, I add my own personality and creativity and turn them into something else.\")))))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"f3ad1cf7-949d-522f-9bf9-198022996d28","fields":{"slug":"/1-reference/§progressive-summarization-2017","title":"Progressive Summarization (2017)"}}}],"inboundReferences":[{"__typename":"Mdx","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"tags\": [\"reference\", \"article\"],\n  \"source\": \"https://fortelabs.co/blog/progressive-summarization-a-practical-technique-for-designing-discoverable-notes/\",\n  \"author\": \"Tiago Forte\",\n  \"publishingdate\": 2017,\n  \"dateretrieved\": \"2020-11-30T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"progressive-summarization-2017\"\n  }, \"Progressive Summarization (2017)\"), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"Method coined by [\", mdx(\"a\", {\n    parentName: \"em\",\n    \"href\": \"../6-people/tiago-forte\",\n    \"title\": \"Tiago Forte\"\n  }, \"tiago-forte\"), \"]\")), mdx(\"h2\", {\n    \"id\": \"knowledge-management-systems\"\n  }, \"Knowledge Management Systems\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Tagging-first system\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"Tagging-first approaches argue that there should be no explicit hierarchy of notes, notebooks, and stacks. Notes are envisioned as an ever-changing, virtual matrix of interconnected, free-floating ideas. Because many tags can be applied to one note, there are multiple pathways to discover any given note. Locating notes in specific notebooks and folders is seen as limiting and static. \"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Notebook-first system\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"This basically translates how we organize things in the physical world\\u200A\\u2014\\u200Ain a series of discrete containers\\u200A\\u2014\\u200Ainto the digital world. \"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discoverability vs. Understanding\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Discoverable = making a note digest by compressing it down to its essential\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Understandable = making a note complete, add context, examples and details\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If a note is too complex: \\u201CThe main points and key insights are hidden somewhere in the noise.\\u201D\")))))), mdx(\"h2\", {\n    \"id\": \"progressive-summarization-5-layers\"\n  }, \"[\", mdx(\"a\", {\n    parentName: \"h2\",\n    \"href\": \"../3-literature/progressive-summarization\",\n    \"title\": \"Progressive Summarization\"\n  }, \"progressive-summarization\"), \"]: 5 Layers\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 1 \\u2014 Notes\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Full notes and context, very understandable\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 2 \\u2014 Bold Passages\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When going back to a note, making bold key sentences, keywords representing the core of the idea\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 3 \\u2014 Highlighted Passages\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Highlighting only the \\u201Cbest of the best\\u201D, unique\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 4 \\u2014 Mini-summary\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Summarizing the key points of the note in your own words\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Layer 5 \\u2014 Remix\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"And finally, for a tiny minority of sources, the ones that are so powerful and exciting I want them to become part of how I think and work immediately, I remix them. After pulling them apart and dissecting them from every angle in layers 1\\u20134, I add my own personality and creativity and turn them into something else.\")))))));\n}\n;\nMDXContent.isMDXComponent = true;","parent":{"__typename":"File","id":"f3ad1cf7-949d-522f-9bf9-198022996d28","fields":{"slug":"/1-reference/§progressive-summarization-2017","title":"Progressive Summarization (2017)"}}}]},"fields":{"slug":"/3-literature/progressive-summarization","title":"Progressive Summarization"}}},"pageContext":{"id":"ce9d3629-cf11-5d03-bf33-5a5adab24952"}},"staticQueryHashes":["2098632890","2221750479","2468095761"]}